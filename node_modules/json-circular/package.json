{
  "name": "json-circular",
  "version": "0.0.1",
  "description": "Simple library to allow for serialization and deserialization (JSON or otherwise) of JS objects containing circular references",
  "main": "json-circular.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/StewartAtkins/JSON-Circular.git"
  },
  "keywords": [
    "JSON",
    "serialization",
    "circular",
    "deserialization"
  ],
  "author": {
    "name": "Stewart Atkins"
  },
  "bugs": {
    "url": "https://github.com/StewartAtkins/JSON-Circular/issues"
  },
  "readme": "JSON-Circular\r\n=============\r\n\r\nSimple Node.js library to allow for serialization and deserialization (JSON or otherwise) of JS objects containing circular or internal references\r\n\r\n\r\nA simple example:\r\n```JavaScript\r\nvar JsonCircular = require('json-circular');\r\nvar demoObj = {\"data\": []};\r\ndemoObj.parent = demoObj;\r\ndemoObj.data.push(demoObj);\r\nvar json = JsonCircular.stringify(demoObj);\r\nvar demoObj2 = JsonCircular.parse(json);\r\n```\r\n\r\nIf JSON is not the desired object serialisation method, the library can be used to prepare objects for serialisation, and restore the object after deserialisation.\r\nWarning: the library will modify the original object in preparation for serialisation, though it can be restored by running the post-processor on the object when serializaztion is complete:\r\n```JavaScript\r\nvar JsonCircular = require('json-circular');\r\nvar demoObj = {\"data\": []};\r\ndemoObj.parent = demoObj;\r\ndemoObj.data.push(demoObj);\r\n\r\n//This will modify demoObj\r\nJsonCircular.preprocess(demoObj);\r\n\r\nvar serializedStr = MyCustomSerializationFunction(demoObj);\r\n\r\n//This will restore demoObj to it's original state\r\nJsonCircular.postprocess(demoObj);\r\n\r\n//For de-serialization\r\nvar demoObj2 = MyCustomDeserializationFunction(serializedStr);\r\nJsonCircular.postprocess(demoObj2);\r\n```\r\n\r\nThe preprocess and postprocess methods return the object that is passed in, so can be stacked thusly:\r\n```JavaScript\r\nvar demoObj2 = JsonCircular.postprocess(MyCustomDeserializationFunction(demoObj2));\r\n```\r\n\r\n###Configuration\r\nThe library has two configuration options, exposed as fields in the JsonCircular object.\r\n - magicMarkerName - the name of the key used to indicate a magic internal reference marker, this should never appear in an object to be serialized. Note: this MUST be the same for both serialization and deserialization, whatever it is set to. Default: @internal-ref\r\n - deserializationError - the indicator used when an internal reference can't be resolved during deserialization. This should never happen, but just in case. Default: {\"@internal-error\": \"Invalid Deserialization Reference\"}\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "json-circular@0.0.1",
  "dist": {
    "shasum": "4e21b53de1004880872c39d7d7e8a2cabd95ab47",
    "tarball": "http://registry.npmjs.org/json-circular/-/json-circular-0.0.1.tgz"
  },
  "_from": "json-circular@*",
  "_npmVersion": "1.2.25",
  "_npmUser": {
    "name": "stewartatkins",
    "email": "satkins01@hotmail.co.uk"
  },
  "maintainers": [
    {
      "name": "stewartatkins",
      "email": "satkins01@hotmail.co.uk"
    }
  ],
  "directories": {},
  "_shasum": "4e21b53de1004880872c39d7d7e8a2cabd95ab47",
  "_resolved": "https://registry.npmjs.org/json-circular/-/json-circular-0.0.1.tgz"
}
